// Generated by BUCKLESCRIPT VERSION 1.7.3, PLEASE EDIT WITH CARE
'use strict';

var Char            = require("bs-platform/lib/js/char.js");
var Block           = require("bs-platform/lib/js/block.js");
var Curry           = require("bs-platform/lib/js/curry.js");
var Buffer          = require("bs-platform/lib/js/buffer.js");
var Lexing          = require("bs-platform/lib/js/lexing.js");
var Printf          = require("bs-platform/lib/js/printf.js");
var Caml_int32      = require("bs-platform/lib/js/caml_int32.js");
var Caml_format     = require("bs-platform/lib/js/caml_format.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

var $$Error = Caml_exceptions.create("OpamLexer.Error");

function error(fmt) {
  return Printf.kprintf(function (msg) {
              throw [
                    $$Error,
                    msg
                  ];
            }, fmt);
}

function relop(x) {
  switch (x) {
    case "!=" : 
        return /* Neq */3901498;
    case "<" : 
        return /* Lt */17064;
    case "<=" : 
        return /* Leq */3802040;
    case "=" : 
        return /* Eq */15500;
    case ">" : 
        return /* Gt */15949;
    case ">=" : 
        return /* Geq */3553395;
    default:
      return Curry._1(error(/* Format */[
                      /* Caml_string */Block.__(3, [
                          /* No_padding */0,
                          /* String_literal */Block.__(11, [
                              " is not a valid comparison operator",
                              /* End_of_format */0
                            ])
                        ]),
                      "%S is not a valid comparison operator"
                    ]), x);
  }
}

function logop(x) {
  switch (x) {
    case "&" : 
        return /* And */3257015;
    case "|" : 
        return /* Or */17731;
    default:
      return Curry._1(error(/* Format */[
                      /* Caml_string */Block.__(3, [
                          /* No_padding */0,
                          /* String_literal */Block.__(11, [
                              " is not a valid logical operator",
                              /* End_of_format */0
                            ])
                        ]),
                      "%S is not a valid logical operator"
                    ]), x);
  }
}

function pfxop(x) {
  switch (x) {
    case "!" : 
        return /* Not */3903731;
    case "?" : 
        return /* Defined */-296132695;
    default:
      return Curry._1(error(/* Format */[
                      /* Caml_string */Block.__(3, [
                          /* No_padding */0,
                          /* String_literal */Block.__(11, [
                              " is not a valid prefix operator",
                              /* End_of_format */0
                            ])
                        ]),
                      "%S is not a valid prefix operator"
                    ]), x);
  }
}

function env_update_op(x) {
  switch (x) {
    case "+=" : 
        return /* PlusEq */1;
    case ":=" : 
        return /* ColonEq */3;
    case "=" : 
        return /* Eq */0;
    case "=+" : 
        return /* EqPlus */2;
    case "=+=" : 
        return /* EqPlusEq */5;
    case "=:" : 
        return /* EqColon */4;
    default:
      return Curry._1(error(/* Format */[
                      /* Caml_string */Block.__(3, [
                          /* No_padding */0,
                          /* String_literal */Block.__(11, [
                              " is not a valid environment update operator",
                              /* End_of_format */0
                            ])
                        ]),
                      "%S is not a valid environment update operator"
                    ]), x);
  }
}

function char_for_backslash(c) {
  if (c >= 110) {
    if (c >= 117) {
      return c;
    } else {
      switch (c - 110 | 0) {
        case 0 : 
            return /* "\n" */10;
        case 4 : 
            return /* "\r" */13;
        case 1 : 
        case 2 : 
        case 3 : 
        case 5 : 
            return c;
        case 6 : 
            return /* "\t" */9;
        
      }
    }
  } else if (c !== 98) {
    return c;
  } else {
    return /* "\b" */8;
  }
}

function char_for_decimal_code(lexbuf, i) {
  var c = (Caml_int32.imul(100, Lexing.lexeme_char(lexbuf, i) - 48 | 0) + Caml_int32.imul(10, Lexing.lexeme_char(lexbuf, i + 1 | 0) - 48 | 0) | 0) + (Lexing.lexeme_char(lexbuf, i + 2 | 0) - 48 | 0) | 0;
  if (c < 0 || c > 255) {
    error(/* Format */[
          /* String_literal */Block.__(11, [
              "illegal escape sequence",
              /* End_of_format */0
            ]),
          "illegal escape sequence"
        ]);
  }
  return Char.chr(c);
}

function char_for_hexadecimal_code(lexbuf, i) {
  var d1 = Lexing.lexeme_char(lexbuf, i);
  var val1 = d1 >= 97 ? d1 - 87 | 0 : (
      d1 >= 65 ? d1 - 55 | 0 : d1 - 48 | 0
    );
  var d2 = Lexing.lexeme_char(lexbuf, i + 1 | 0);
  var val2 = d2 >= 97 ? d2 - 87 | 0 : (
      d2 >= 65 ? d2 - 55 | 0 : d2 - 48 | 0
    );
  return Char.chr((val1 << 4) + val2 | 0);
}

function buffer_rule(r, lb) {
  var b = Buffer.create(64);
  Curry._2(r, b, lb);
  return Buffer.contents(b);
}

var __ocaml_lex_tables = /* record */[
  /* lex_base */"\0\0\xe8\xff\xe9\xff\x03\0\xeb\xff\xec\xff\xed\xff\x1f\0\x01\0!\0S\0\xa3\0\xf1\0?\x01\x8f\x01\xdf\x01\xf3\xff\x02\0\xf7\xff\0\0\xf9\xff\xfa\xff\xfb\xff\xfc\xff#\0\xfe\xff\xff\xff\xea\xff\xf4\xff\x03\0\xf5\xff-\x02{\x02\xcb\x02\x1b\x03k\x03\xb9\x03\t\x04Y\x04\xa7\x04\xf7\x04G\x05\x97\x05\xe7\x055\x06\xee\xffB\0\xa6\x06\xfb\xff\xfc\xff\xfd\xff\xfe\xff\xff\xff\xa7\x06\xfb\xff\xfc\xff\xfd\xff\xfe\xff\x05\0\f\0\xff\xff\xaa\x06\xf3\x06\x85\x06\xfe\xff\x0f\0\xb4\x06\xfd\xff\n\x07\xfc\xff\xcb\x05\xfb\xff\xfc\xff\xfd\xffW\0Y\0\xff\xff\xfe\xff\x01\0\xff\xff\xab\x02\xd7\x04",
  /* lex_backtrk */"\xff\xff\xff\xff\xff\xff\x17\0\xff\xff\xff\xff\xff\xff\x11\0\x11\0\x14\0\x10\0\x0f\0\x0f\0\x17\0\x10\0\x10\0\xff\xff\t\0\xff\xff\x07\0\xff\xff\xff\xff\xff\xff\xff\xff\x02\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x10\0\x10\0\r\0\xff\xff\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x0e\0\xff\xff\xff\xff\x15\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x03\0\xff\xff\xff\xff\x04\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x04\0\x04\0\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\xff\xff",
  /* lex_default */"\x01\0\0\0\0\0\xff\xff\0\0\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\0\0\xff\xff\0\0\0\0\0\0\0\0\xff\xff\0\0\0\0\0\0\0\0\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff1\0\0\0\0\0\0\0\0\0\0\x007\0\0\0\0\0\0\0\0\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\xff\xff\0\0G\0\0\0\0\0\0\0\xff\xff\xff\xff\0\0\0\0P\0\0\0Q\0Q\0",
  /* lex_trans */"\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x1a\0\x19\0O\0\0\0\x1a\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0A\0\0\0\0\0\0\0A\0\0\0\0\0\0\0\x1a\0\t\0\x11\0\x10\0\x1d\0\x1e\0\x06\0;\0\x13\0\x12\0\x1c\0\x03\0.\0\r\0<\0A\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\x18\0.\0\x07\0\b\0\x07\0\x04\0\x1b\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\x15\0-\0\x14\0-\0\x0b\0\x1b\0\n\0\n\0\n\0\n\0\n\0\x0e\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\x0f\0\n\0\n\0\n\0\n\0\n\0\n\0\x17\0\x05\0\x16\0 \0\x1b\0\n\0M\0L\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\x1f\0\0\0\0\0\0\0\0\0\0\0\0\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\0\0\0\0\0\0\0\0\n\0\0\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0 \0\0\0,\0\0\0\0\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\x1f\0\0\0\0\0\0\0\0\0\0\0\0\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\0\0\0\0\x02\0\xff\xff\f\0\0\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0,\0\0\0\0\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\0\0\0\0\0\0\0\0\f\0\0\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0,\0\0\0\0\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\0\0\0\0\0\0\0\0\f\0\0\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0 \0\0\0\n\0\0\0\0\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\x1f\0\0\0\0\0\0\0\0\0\0\0\0\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\0\0\0\0\0\0\0\0\n\0\0\0(\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0 \0\0\0\n\0\0\0\0\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\x1f\0\0\0\0\0\0\0\0\0\0\0\0\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\0\0\0\0\0\0\0\0\n\0\0\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0!\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\x1f\0\0\0\0\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0\0\0\0\0\0\0\0\0\x1f\0\0\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0$\0\0\0\0\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0O\0\0\0\0\0\0\0\0\0\0\0\0\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0\0\0\0\0\0\0\0\0%\0\0\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0 \0\0\0\n\0\0\0\0\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\x1f\0\0\0\0\0\0\0\0\0\0\0\0\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\0\0\0\0\0\0\0\0\n\0\0\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\"\0\n\0\n\0\n\0\n\0\n\0 \0\0\0\n\0\0\0\0\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\x1f\0\0\0\0\0\0\0\0\0\0\0\0\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\0\0\0\0\0\0\0\0\n\0\0\0\n\0\n\0\n\0\n\0#\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0 \0\0\0\n\0\0\0\0\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\x1f\0\0\0\0\0\0\0\0\0\0\0\xff\xff\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\0\0\0\0\0\0\0\0\n\0\0\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0$\0\0\0\0\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0\0\0\0\0\0\0\0\0$\0\0\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0 \0\0\0$\0\0\0\0\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0\x1f\0\0\0\0\0\0\0\0\0\0\0\0\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0\0\0\0\0\0\0\0\0$\0\0\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0 \0\0\0&\0\0\0\0\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0\x1f\0\0\0\0\0\0\0\0\0\0\0\0\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0\0\0\0\0\0\0\0\0&\0\0\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0'\0\0\0\0\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0O\0\0\0\0\0\0\0\0\0\0\0\0\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0\0\0\0\0\0\0\0\0'\0\0\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0 \0\0\0\n\0\0\0\0\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\x1f\0\0\0\0\0\0\0\0\0\0\0\0\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\0\0\0\0\0\0\0\0\n\0\0\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0)\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0 \0\0\0\n\0\0\0\0\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\x1f\0\0\0\0\0\0\0\0\0\0\0\0\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\0\0\0\0\0\0\0\0\n\0\0\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0*\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0 \0\0\0\n\0\0\0\0\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\x1f\0\0\0\0\0\0\0H\0\0\0\xff\xff\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\0\0J\0\0\0K\0\n\0\0\0\n\0\n\0\n\0\n\0+\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0 \0\0\0\n\0\0\0\0\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\x1f\0\0\0\0\0\0\0\0\0\0\0\0\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\0\0\0\0\0\0\0\0\n\0\0\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0,\0\0\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\0\0\0\0\0\0\0\0,\0\0\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\x003\x009\0\0\0\0\0A\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x004\0:\0@\0I\0@\0\0\0\0\0\0\0\0\0@\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x002\x008\0\0\0\0\0@\0\0\0\0\0\0\0\0\0\0\0@\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0@\0\0\0\0\0\0\0@\0\0\0@\0\0\0\0\0\0\0>\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0D\0D\0D\0D\0D\0D\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0E\0E\0E\0E\0E\0E\0\0\0\0\0\0\0D\0D\0D\0D\0D\0D\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0E\0E\0E\0E\0E\0E\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x000\x006\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0",
  /* lex_check */"\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0N\0\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffA\0\xff\xff\xff\xff\xff\xffA\0\xff\xff\xff\xff\xff\xff\0\0\0\0\0\0\0\0\x11\0\x1d\0\0\0:\0\0\0\0\0\x13\0\0\0\b\0\0\0;\0A\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\b\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x07\0\0\0\t\0\0\0\x18\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\n\0.\0\n\0J\0K\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\xff\xff\xff\xff\xff\xff\xff\xff\n\0\xff\xff\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\x0b\0\xff\xff\x0b\0\xff\xff\xff\xff\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\xff\xff\xff\xff\0\0N\0\x0b\0\xff\xff\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\f\0\xff\xff\xff\xff\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\xff\xff\xff\xff\xff\xff\xff\xff\f\0\xff\xff\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\r\0\xff\xff\xff\xff\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\xff\xff\xff\xff\xff\xff\xff\xff\r\0\xff\xff\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\x0e\0\xff\xff\x0e\0\xff\xff\xff\xff\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\xff\xff\xff\xff\xff\xff\xff\xff\x0e\0\xff\xff\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0f\0\xff\xff\x0f\0\xff\xff\xff\xff\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\xff\xff\xff\xff\xff\xff\xff\xff\x0f\0\xff\xff\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x1f\0\xff\xff\xff\xff\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\xff\xff\xff\xff\xff\xff\xff\xff\x1f\0\xff\xff\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0 \0\xff\xff\xff\xff \0 \0 \0 \0 \0 \0 \0 \0 \0 \0P\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0\xff\xff\xff\xff\xff\xff\xff\xff \0\xff\xff \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0!\0\xff\xff!\0\xff\xff\xff\xff!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0\xff\xff\xff\xff\xff\xff\xff\xff!\0\xff\xff!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0\"\0\xff\xff\"\0\xff\xff\xff\xff\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\xff\xff\xff\xff\xff\xff\xff\xff\"\0\xff\xff\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0\"\0#\0\xff\xff#\0\xff\xff\xff\xff#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffP\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0\xff\xff\xff\xff\xff\xff\xff\xff#\0\xff\xff#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0$\0\xff\xff\xff\xff$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0\xff\xff\xff\xff\xff\xff\xff\xff$\0\xff\xff$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0%\0\xff\xff%\0\xff\xff\xff\xff%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0\xff\xff\xff\xff\xff\xff\xff\xff%\0\xff\xff%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0&\0\xff\xff&\0\xff\xff\xff\xff&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0\xff\xff\xff\xff\xff\xff\xff\xff&\0\xff\xff&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0'\0\xff\xff\xff\xff'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0Q\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0\xff\xff\xff\xff\xff\xff\xff\xff'\0\xff\xff'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0(\0\xff\xff(\0\xff\xff\xff\xff(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0\xff\xff\xff\xff\xff\xff\xff\xff(\0\xff\xff(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0)\0\xff\xff)\0\xff\xff\xff\xff)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0\xff\xff\xff\xff\xff\xff\xff\xff)\0\xff\xff)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0*\0\xff\xff*\0\xff\xff\xff\xff*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0\xff\xff\xff\xff\xff\xffF\0\xff\xffQ\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0\xff\xffF\0\xff\xffF\0*\0\xff\xff*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0+\0\xff\xff+\0\xff\xff\xff\xff+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0\xff\xff\xff\xff\xff\xff\xff\xff+\0\xff\xff+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0,\0\xff\xff\xff\xff,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\xff\xff\xff\xff\xff\xff\xff\xff,\0\xff\xff,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0/\x005\0\xff\xff\xff\xff=\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff/\x005\0=\0F\0=\0\xff\xff\xff\xff\xff\xff\xff\xff=\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff/\x005\0\xff\xff\xff\xff=\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff=\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff=\0\xff\xff\xff\xff\xff\xff=\0\xff\xff=\0\xff\xff\xff\xff\xff\xff=\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff>\0>\0>\0>\0>\0>\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffD\0D\0D\0D\0D\0D\0\xff\xff\xff\xff\xff\xff>\0>\0>\0>\0>\0>\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffD\0D\0D\0D\0D\0D\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff/\x005\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff",
  /* lex_base_code */"",
  /* lex_backtrk_code */"",
  /* lex_default_code */"",
  /* lex_trans_code */"",
  /* lex_check_code */"",
  /* lex_code */""
];

function token(lexbuf) {
  var lexbuf$1 = lexbuf;
  var ___ocaml_lex_state = 0;
  while(true) {
    var __ocaml_lex_state = ___ocaml_lex_state;
    var __ocaml_lex_state$1 = Lexing.engine(__ocaml_lex_tables, __ocaml_lex_state, lexbuf$1);
    if (__ocaml_lex_state$1 > 23 || __ocaml_lex_state$1 < 0) {
      Curry._1(lexbuf$1[/* refill_buff */0], lexbuf$1);
      ___ocaml_lex_state = __ocaml_lex_state$1;
      continue ;
      
    } else {
      switch (__ocaml_lex_state$1) {
        case 0 : 
            return token(lexbuf$1);
        case 1 : 
            Lexing.new_line(lexbuf$1);
            return token(lexbuf$1);
        case 2 : 
            return /* COLON */7;
        case 3 : 
            return /* LBRACE */5;
        case 4 : 
            return /* RBRACE */6;
        case 5 : 
            return /* LBRACKET */1;
        case 6 : 
            return /* RBRACKET */2;
        case 7 : 
            return /* LPAR */3;
        case 8 : 
            return /* RPAR */4;
        case 9 : 
            return /* STRING */Block.__(0, [buffer_rule(string, lexbuf$1)]);
        case 10 : 
            return /* STRING */Block.__(0, [buffer_rule(string_triple, lexbuf$1)]);
        case 11 : 
            __ocaml_lex_comment_rec(1, lexbuf$1, 70);
            return token(lexbuf$1);
        case 12 : 
            __ocaml_lex_comment_line_rec(lexbuf$1, 78);
            return token(lexbuf$1);
        case 13 : 
            return /* BOOL */Block.__(2, [/* true */1]);
        case 14 : 
            return /* BOOL */Block.__(2, [/* false */0]);
        case 15 : 
            return /* INT */Block.__(3, [Caml_format.caml_int_of_string(Lexing.lexeme(lexbuf$1))]);
        case 16 : 
            return /* IDENT */Block.__(1, [Lexing.lexeme(lexbuf$1)]);
        case 17 : 
            return /* RELOP */Block.__(4, [relop(Lexing.lexeme(lexbuf$1))]);
        case 18 : 
            return /* AND */8;
        case 19 : 
            return /* OR */9;
        case 20 : 
            return /* PFXOP */Block.__(5, [pfxop(Lexing.lexeme(lexbuf$1))]);
        case 21 : 
            return /* ENVOP */Block.__(6, [env_update_op(Lexing.lexeme(lexbuf$1))]);
        case 22 : 
            return /* EOF */0;
        case 23 : 
            return Curry._1(error(/* Format */[
                            /* Char_literal */Block.__(12, [
                                /* "'" */39,
                                /* String */Block.__(2, [
                                    /* No_padding */0,
                                    /* String_literal */Block.__(11, [
                                        "' is not a valid token",
                                        /* End_of_format */0
                                      ])
                                  ])
                              ]),
                            "'%s' is not a valid token"
                          ]), Lexing.lexeme(lexbuf$1));
        
      }
    }
  };
}

function string(b, lexbuf) {
  var b$1 = b;
  var lexbuf$1 = lexbuf;
  var ___ocaml_lex_state = 47;
  while(true) {
    var __ocaml_lex_state = ___ocaml_lex_state;
    var __ocaml_lex_state$1 = Lexing.engine(__ocaml_lex_tables, __ocaml_lex_state, lexbuf$1);
    if (__ocaml_lex_state$1 > 4 || __ocaml_lex_state$1 < 0) {
      Curry._1(lexbuf$1[/* refill_buff */0], lexbuf$1);
      ___ocaml_lex_state = __ocaml_lex_state$1;
      continue ;
      
    } else {
      switch (__ocaml_lex_state$1) {
        case 0 : 
            return /* () */0;
        case 1 : 
            Lexing.new_line(lexbuf$1);
            Buffer.add_char(b$1, /* "\n" */10);
            ___ocaml_lex_state = 47;
            continue ;
            case 2 : 
            var match = __ocaml_lex_escape_rec(lexbuf$1, 61);
            if (match) {
              Buffer.add_char(b$1, match[0]);
            }
            ___ocaml_lex_state = 47;
            continue ;
            case 3 : 
            var c = Lexing.sub_lexeme_char(lexbuf$1, lexbuf$1[/* lex_start_pos */4]);
            Buffer.add_char(b$1, c);
            ___ocaml_lex_state = 47;
            continue ;
            case 4 : 
            return error(/* Format */[
                        /* String_literal */Block.__(11, [
                            "unterminated string",
                            /* End_of_format */0
                          ]),
                        "unterminated string"
                      ]);
        
      }
    }
  };
}

function string_triple(b, lexbuf) {
  var b$1 = b;
  var lexbuf$1 = lexbuf;
  var ___ocaml_lex_state = 53;
  while(true) {
    var __ocaml_lex_state = ___ocaml_lex_state;
    var __ocaml_lex_state$1 = Lexing.engine(__ocaml_lex_tables, __ocaml_lex_state, lexbuf$1);
    if (__ocaml_lex_state$1 > 4 || __ocaml_lex_state$1 < 0) {
      Curry._1(lexbuf$1[/* refill_buff */0], lexbuf$1);
      ___ocaml_lex_state = __ocaml_lex_state$1;
      continue ;
      
    } else {
      switch (__ocaml_lex_state$1) {
        case 0 : 
            return /* () */0;
        case 1 : 
            Lexing.new_line(lexbuf$1);
            Buffer.add_char(b$1, /* "\n" */10);
            ___ocaml_lex_state = 53;
            continue ;
            case 2 : 
            var match = __ocaml_lex_escape_rec(lexbuf$1, 61);
            if (match) {
              Buffer.add_char(b$1, match[0]);
            }
            ___ocaml_lex_state = 53;
            continue ;
            case 3 : 
            var c = Lexing.sub_lexeme_char(lexbuf$1, lexbuf$1[/* lex_start_pos */4]);
            Buffer.add_char(b$1, c);
            ___ocaml_lex_state = 53;
            continue ;
            case 4 : 
            return error(/* Format */[
                        /* String_literal */Block.__(11, [
                            "unterminated string",
                            /* End_of_format */0
                          ]),
                        "unterminated string"
                      ]);
        
      }
    }
  };
}

function __ocaml_lex_escape_rec(lexbuf, ___ocaml_lex_state) {
  while(true) {
    var __ocaml_lex_state = ___ocaml_lex_state;
    var __ocaml_lex_state$1 = Lexing.engine(__ocaml_lex_tables, __ocaml_lex_state, lexbuf);
    if (__ocaml_lex_state$1 > 4 || __ocaml_lex_state$1 < 0) {
      Curry._1(lexbuf[/* refill_buff */0], lexbuf);
      ___ocaml_lex_state = __ocaml_lex_state$1;
      continue ;
      
    } else {
      switch (__ocaml_lex_state$1) {
        case 0 : 
            Lexing.new_line(lexbuf);
            return /* None */0;
        case 1 : 
            var c = Lexing.sub_lexeme_char(lexbuf, lexbuf[/* lex_start_pos */4]);
            return /* Some */[char_for_backslash(c)];
        case 2 : 
            return /* Some */[char_for_decimal_code(lexbuf, 0)];
        case 3 : 
            return /* Some */[char_for_hexadecimal_code(lexbuf, 1)];
        case 4 : 
            return error(/* Format */[
                        /* String_literal */Block.__(11, [
                            "illegal escape sequence",
                            /* End_of_format */0
                          ]),
                        "illegal escape sequence"
                      ]);
        
      }
    }
  };
}

function __ocaml_lex_comment_rec(_n, lexbuf, ___ocaml_lex_state) {
  while(true) {
    var __ocaml_lex_state = ___ocaml_lex_state;
    var n = _n;
    var __ocaml_lex_state$1 = Lexing.engine(__ocaml_lex_tables, __ocaml_lex_state, lexbuf);
    if (__ocaml_lex_state$1 > 4 || __ocaml_lex_state$1 < 0) {
      Curry._1(lexbuf[/* refill_buff */0], lexbuf);
      ___ocaml_lex_state = __ocaml_lex_state$1;
      continue ;
      
    } else {
      switch (__ocaml_lex_state$1) {
        case 0 : 
            if (n > 1) {
              ___ocaml_lex_state = 70;
              _n = n - 1 | 0;
              continue ;
              
            } else {
              return 0;
            }
            break;
        case 1 : 
            ___ocaml_lex_state = 70;
            _n = n + 1 | 0;
            continue ;
            case 2 : 
            return error(/* Format */[
                        /* String_literal */Block.__(11, [
                            "unterminated comment",
                            /* End_of_format */0
                          ]),
                        "unterminated comment"
                      ]);
        case 3 : 
            Lexing.new_line(lexbuf);
            ___ocaml_lex_state = 70;
            continue ;
            case 4 : 
            ___ocaml_lex_state = 70;
            continue ;
            
      }
    }
  };
}

function __ocaml_lex_comment_line_rec(lexbuf, ___ocaml_lex_state) {
  while(true) {
    var __ocaml_lex_state = ___ocaml_lex_state;
    var __ocaml_lex_state$1 = Lexing.engine(__ocaml_lex_tables, __ocaml_lex_state, lexbuf);
    if (__ocaml_lex_state$1 !== 0) {
      if (__ocaml_lex_state$1 !== 1) {
        Curry._1(lexbuf[/* refill_buff */0], lexbuf);
        ___ocaml_lex_state = __ocaml_lex_state$1;
        continue ;
        
      } else {
        return /* () */0;
      }
    } else {
      return Lexing.new_line(lexbuf);
    }
  };
}

exports.$$Error       = $$Error;
exports.relop         = relop;
exports.logop         = logop;
exports.pfxop         = pfxop;
exports.env_update_op = env_update_op;
exports.token         = token;
/* No side effect */
