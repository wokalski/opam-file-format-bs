// Generated by BUCKLESCRIPT VERSION 1.7.3, PLEASE EDIT WITH CARE
'use strict';

var Curry          = require("bs-platform/lib/js/curry.js");
var Lexing         = require("bs-platform/lib/js/lexing.js");
var Parsing        = require("bs-platform/lib/js/parsing.js");
var OpamLexer      = require("./opamLexer.js");
var Pervasives     = require("bs-platform/lib/js/pervasives.js");
var OpamBaseParser = require("../../src/opamBaseParser.js");

function string(str, filename) {
  var lexbuf = Lexing.from_string(str);
  var init = lexbuf[/* lex_curr_p */11];
  lexbuf[/* lex_curr_p */11] = /* record */[
    /* pos_fname */filename,
    /* pos_lnum */init[/* pos_lnum */1],
    /* pos_bol */init[/* pos_bol */2],
    /* pos_cnum */init[/* pos_cnum */3]
  ];
  return OpamBaseParser.main(OpamLexer.token, lexbuf, filename);
}

function channel(ic, filename) {
  var lexbuf = Lexing.from_channel(ic);
  var init = lexbuf[/* lex_curr_p */11];
  lexbuf[/* lex_curr_p */11] = /* record */[
    /* pos_fname */filename,
    /* pos_lnum */init[/* pos_lnum */1],
    /* pos_bol */init[/* pos_bol */2],
    /* pos_cnum */init[/* pos_cnum */3]
  ];
  return OpamBaseParser.main(OpamLexer.token, lexbuf, filename);
}

function file(filename) {
  var ic = Pervasives.open_in(filename);
  try {
    return channel(ic, filename);
  }
  catch (e){
    Curry._1(Pervasives.close_in, ic);
    throw e;
  }
}

function value_of_string(pos, str) {
  var lexbuf = Lexing.from_string(str);
  if (pos) {
    lexbuf[/* lex_curr_p */11] = pos[0];
  }
  try {
    var v = OpamBaseParser.value(OpamLexer.token, lexbuf);
    Parsing.clear_parser(/* () */0);
    return v;
  }
  catch (e){
    Parsing.clear_parser(/* () */0);
    throw e;
  }
}

var main = OpamBaseParser.main;

exports.main            = main;
exports.string          = string;
exports.channel         = channel;
exports.file            = file;
exports.value_of_string = value_of_string;
/* No side effect */
