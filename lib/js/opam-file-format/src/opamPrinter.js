// Generated by BUCKLESCRIPT VERSION 1.7.3, PLEASE EDIT WITH CARE
'use strict';

var List                    = require("bs-platform/lib/js/list.js");
var $$Array                 = require("bs-platform/lib/js/array.js");
var Block                   = require("bs-platform/lib/js/block.js");
var Curry                   = require("bs-platform/lib/js/curry.js");
var Buffer                  = require("bs-platform/lib/js/buffer.js");
var Format                  = require("bs-platform/lib/js/format.js");
var Js_exn                  = require("bs-platform/lib/js/js_exn.js");
var Printf                  = require("bs-platform/lib/js/printf.js");
var $$String                = require("bs-platform/lib/js/string.js");
var Caml_obj                = require("bs-platform/lib/js/caml_obj.js");
var Caml_array              = require("bs-platform/lib/js/caml_array.js");
var OpamParser              = require("./opamParser.js");
var Pervasives              = require("bs-platform/lib/js/pervasives.js");
var Caml_string             = require("bs-platform/lib/js/caml_string.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function relop(param) {
  if (param >= 17064) {
    if (param >= 3802040) {
      if (param >= 3901498) {
        return "!=";
      } else {
        return "<=";
      }
    } else if (param >= 3553395) {
      return ">=";
    } else {
      return "<";
    }
  } else if (param >= 15949) {
    return ">";
  } else {
    return "=";
  }
}

function logop(param) {
  if (param >= 3257015) {
    return "&";
  } else {
    return "|";
  }
}

function pfxop(param) {
  if (param >= 3903731) {
    return "!";
  } else {
    return "?";
  }
}

function env_update_op(param) {
  switch (param) {
    case 0 : 
        return "=";
    case 1 : 
        return "+=";
    case 2 : 
        return "=+";
    case 3 : 
        return ":=";
    case 4 : 
        return "=:";
    case 5 : 
        return "=+=";
    
  }
}

function escape_string($staropt$star, s) {
  var triple = $staropt$star ? $staropt$star[0] : /* false */0;
  var len = s.length;
  var buf = Buffer.create((len << 1));
  for(var i = 0 ,i_finish = len - 1 | 0; i <= i_finish; ++i){
    var c = Caml_string.get(s, i);
    if (c !== 34) {
      if (c !== 92) {
        
      } else {
        Buffer.add_char(buf, /* "\\" */92);
      }
    } else if (!triple || i < (len - 2 | 0) && Caml_string.get(s, i + 1 | 0) === /* "\"" */34 && Caml_string.get(s, i + 2 | 0) === /* "\"" */34 || i === (len - 1 | 0)) {
      Buffer.add_char(buf, /* "\\" */92);
    }
    Buffer.add_char(buf, c);
  }
  return Buffer.contents(buf);
}

function format_value(fmt, param) {
  switch (param.tag | 0) {
    case 0 : 
        return Curry._1(Format.fprintf(fmt, /* Format */[
                        /* Bool */Block.__(9, [/* End_of_format */0]),
                        "%b"
                      ]), param[1]);
    case 1 : 
        return Curry._1(Format.fprintf(fmt, /* Format */[
                        /* Int */Block.__(4, [
                            /* Int_d */0,
                            /* No_padding */0,
                            /* No_precision */0,
                            /* End_of_format */0
                          ]),
                        "%d"
                      ]), param[1]);
    case 2 : 
        var s = param[1];
        if ($$String.contains(s, /* "\n" */10)) {
          return Curry._1(Format.fprintf(fmt, /* Format */[
                          /* String_literal */Block.__(11, [
                              "\"\"\"\n",
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* String_literal */Block.__(11, [
                                      "\"\"\"",
                                      /* End_of_format */0
                                    ])
                                ])
                            ]),
                          "\"\"\"\n%s\"\"\""
                        ]), escape_string(/* Some */[/* true */1], s));
        } else {
          return Curry._1(Format.fprintf(fmt, /* Format */[
                          /* Char_literal */Block.__(12, [
                              /* "\"" */34,
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* Char_literal */Block.__(12, [
                                      /* "\"" */34,
                                      /* End_of_format */0
                                    ])
                                ])
                            ]),
                          "\"%s\""
                        ]), escape_string(/* None */0, s));
        }
    case 3 : 
        return Curry._5(Format.fprintf(fmt, /* Format */[
                        /* Formatting_gen */Block.__(18, [
                            /* Open_box */Block.__(1, [/* Format */[
                                  /* String_literal */Block.__(11, [
                                      "<h>",
                                      /* End_of_format */0
                                    ]),
                                  "<h>"
                                ]]),
                            /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                    /* " " */32,
                                    /* String */Block.__(2, [
                                        /* No_padding */0,
                                        /* Formatting_lit */Block.__(17, [
                                            /* Break */Block.__(0, [
                                                "@ ",
                                                1,
                                                0
                                              ]),
                                            /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                    /* Close_box */0,
                                                    /* End_of_format */0
                                                  ])])
                                          ])
                                      ])
                                  ])])
                          ]),
                        "@[<h>%a %s@ %a@]"
                      ]), format_value, param[2], relop(param[1]), format_value, param[3]);
    case 4 : 
        return Curry._3(Format.fprintf(fmt, /* Format */[
                        /* Formatting_gen */Block.__(18, [
                            /* Open_box */Block.__(1, [/* Format */[
                                  /* String_literal */Block.__(11, [
                                      "<h>",
                                      /* End_of_format */0
                                    ]),
                                  "<h>"
                                ]]),
                            /* String */Block.__(2, [
                                /* No_padding */0,
                                /* Formatting_lit */Block.__(17, [
                                    /* Break */Block.__(0, [
                                        "@ ",
                                        1,
                                        0
                                      ]),
                                    /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                            /* Close_box */0,
                                            /* End_of_format */0
                                          ])])
                                  ])
                              ])
                          ]),
                        "@[<h>%s@ %a@]"
                      ]), relop(param[1]), format_value, param[2]);
    case 5 : 
        return Curry._5(Format.fprintf(fmt, /* Format */[
                        /* Formatting_gen */Block.__(18, [
                            /* Open_box */Block.__(1, [/* Format */[
                                  /* String_literal */Block.__(11, [
                                      "<hv>",
                                      /* End_of_format */0
                                    ]),
                                  "<hv>"
                                ]]),
                            /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                    /* " " */32,
                                    /* String */Block.__(2, [
                                        /* No_padding */0,
                                        /* Formatting_lit */Block.__(17, [
                                            /* Break */Block.__(0, [
                                                "@ ",
                                                1,
                                                0
                                              ]),
                                            /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                    /* Close_box */0,
                                                    /* End_of_format */0
                                                  ])])
                                          ])
                                      ])
                                  ])])
                          ]),
                        "@[<hv>%a %s@ %a@]"
                      ]), format_value, param[2], logop(param[1]), format_value, param[3]);
    case 6 : 
        return Curry._3(Format.fprintf(fmt, /* Format */[
                        /* Formatting_gen */Block.__(18, [
                            /* Open_box */Block.__(1, [/* Format */[
                                  /* String_literal */Block.__(11, [
                                      "<h>",
                                      /* End_of_format */0
                                    ]),
                                  "<h>"
                                ]]),
                            /* String */Block.__(2, [
                                /* No_padding */0,
                                /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                        /* Close_box */0,
                                        /* End_of_format */0
                                      ])])
                              ])
                          ]),
                        "@[<h>%s%a@]"
                      ]), pfxop(param[1]), format_value, param[2]);
    case 7 : 
        return Curry._1(Format.fprintf(fmt, /* Format */[
                        /* String */Block.__(2, [
                            /* No_padding */0,
                            /* End_of_format */0
                          ]),
                        "%s"
                      ]), param[1]);
    case 8 : 
        return Curry._2(Format.fprintf(fmt, /* Format */[
                        /* Formatting_gen */Block.__(18, [
                            /* Open_box */Block.__(1, [/* Format */[
                                  /* String_literal */Block.__(11, [
                                      "<hv>",
                                      /* End_of_format */0
                                    ]),
                                  "<hv>"
                                ]]),
                            /* Char_literal */Block.__(12, [
                                /* "[" */91,
                                /* Formatting_lit */Block.__(17, [
                                    /* Break */Block.__(0, [
                                        "@;<0 2>",
                                        0,
                                        2
                                      ]),
                                    /* Formatting_gen */Block.__(18, [
                                        /* Open_box */Block.__(1, [/* Format */[
                                              /* String_literal */Block.__(11, [
                                                  "<hv>",
                                                  /* End_of_format */0
                                                ]),
                                              "<hv>"
                                            ]]),
                                        /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                /* Close_box */0,
                                                /* Formatting_lit */Block.__(17, [
                                                    /* Break */Block.__(0, [
                                                        "@,",
                                                        0,
                                                        0
                                                      ]),
                                                    /* Char_literal */Block.__(12, [
                                                        /* "]" */93,
                                                        /* Formatting_lit */Block.__(17, [
                                                            /* Close_box */0,
                                                            /* End_of_format */0
                                                          ])
                                                      ])
                                                  ])
                                              ])])
                                      ])
                                  ])
                              ])
                          ]),
                        "@[<hv>[@;<0 2>@[<hv>%a@]@,]@]"
                      ]), format_values, param[1]);
    case 9 : 
        return Curry._2(Format.fprintf(fmt, /* Format */[
                        /* Formatting_gen */Block.__(18, [
                            /* Open_box */Block.__(1, [/* Format */[
                                  /* String_literal */Block.__(11, [
                                      "<hv>",
                                      /* End_of_format */0
                                    ]),
                                  "<hv>"
                                ]]),
                            /* Char_literal */Block.__(12, [
                                /* "(" */40,
                                /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                        /* ")" */41,
                                        /* Formatting_lit */Block.__(17, [
                                            /* Close_box */0,
                                            /* End_of_format */0
                                          ])
                                      ])])
                              ])
                          ]),
                        "@[<hv>(%a)@]"
                      ]), format_values, param[1]);
    case 10 : 
        return Curry._4(Format.fprintf(fmt, /* Format */[
                        /* Formatting_gen */Block.__(18, [
                            /* Open_box */Block.__(1, [/* Format */[
                                  /* String_literal */Block.__(11, [
                                      "<hov 2>",
                                      /* End_of_format */0
                                    ]),
                                  "<hov 2>"
                                ]]),
                            /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                    /* Break */Block.__(0, [
                                        "@ ",
                                        1,
                                        0
                                      ]),
                                    /* Char_literal */Block.__(12, [
                                        /* "{" */123,
                                        /* Formatting_gen */Block.__(18, [
                                            /* Open_box */Block.__(1, [/* Format */[
                                                  /* String_literal */Block.__(11, [
                                                      "<hv>",
                                                      /* End_of_format */0
                                                    ]),
                                                  "<hv>"
                                                ]]),
                                            /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                    /* Close_box */0,
                                                    /* Char_literal */Block.__(12, [
                                                        /* "}" */125,
                                                        /* Formatting_lit */Block.__(17, [
                                                            /* Close_box */0,
                                                            /* End_of_format */0
                                                          ])
                                                      ])
                                                  ])])
                                          ])
                                      ])
                                  ])])
                          ]),
                        "@[<hov 2>%a@ {@[<hv>%a@]}@]"
                      ]), format_value, param[1], format_values, param[2]);
    case 11 : 
        return Curry._5(Format.fprintf(fmt, /* Format */[
                        /* Formatting_gen */Block.__(18, [
                            /* Open_box */Block.__(1, [/* Format */[
                                  /* String_literal */Block.__(11, [
                                      "<h>",
                                      /* End_of_format */0
                                    ]),
                                  "<h>"
                                ]]),
                            /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                    /* " " */32,
                                    /* String */Block.__(2, [
                                        /* No_padding */0,
                                        /* Formatting_lit */Block.__(17, [
                                            /* Break */Block.__(0, [
                                                "@ ",
                                                1,
                                                0
                                              ]),
                                            /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                    /* Close_box */0,
                                                    /* End_of_format */0
                                                  ])])
                                          ])
                                      ])
                                  ])])
                          ]),
                        "@[<h>%a %s@ %a@]"
                      ]), format_value, param[1], env_update_op(param[2]), format_value, param[3]);
    
  }
}

function format_values(fmt, _param) {
  while(true) {
    var param = _param;
    if (param) {
      var r = param[1];
      var v = param[0];
      if (r) {
        format_value(fmt, v);
        Format.pp_print_space(fmt, /* () */0);
        _param = r;
        continue ;
        
      } else {
        return format_value(fmt, v);
      }
    } else {
      return /* () */0;
    }
  };
}

function value(v) {
  format_value(Format.str_formatter, v);
  return Format.flush_str_formatter(/* () */0);
}

function value_list(vl) {
  Curry._2(Format.fprintf(Format.str_formatter, /* Format */[
            /* Formatting_gen */Block.__(18, [
                /* Open_box */Block.__(1, [/* Format */[
                      /* String_literal */Block.__(11, [
                          "<hv>",
                          /* End_of_format */0
                        ]),
                      "<hv>"
                    ]]),
                /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                        /* Close_box */0,
                        /* End_of_format */0
                      ])])
              ]),
            "@[<hv>%a@]"
          ]), format_values, vl);
  return Format.flush_str_formatter(/* () */0);
}

function format_item(fmt, param) {
  if (param.tag) {
    var v = param[2];
    var i = param[1];
    var exit = 0;
    switch (v.tag | 0) {
      case 2 : 
          if ($$String.contains(v[1], /* "\n" */10)) {
            return Curry._3(Format.fprintf(fmt, /* Format */[
                            /* Formatting_gen */Block.__(18, [
                                /* Open_box */Block.__(1, [/* Format */[
                                      /* String_literal */Block.__(11, [
                                          "<hov 0>",
                                          /* End_of_format */0
                                        ]),
                                      "<hov 0>"
                                    ]]),
                                /* String */Block.__(2, [
                                    /* No_padding */0,
                                    /* String_literal */Block.__(11, [
                                        ": ",
                                        /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                /* Close_box */0,
                                                /* End_of_format */0
                                              ])])
                                      ])
                                  ])
                              ]),
                            "@[<hov 0>%s: %a@]"
                          ]), i, format_value, v);
          } else {
            exit = 1;
          }
          break;
      case 8 : 
          var l = v[1];
          var exit$1 = 0;
          if (l) {
            var match = l[0];
            if (match.tag === 8) {
              if (match[1]) {
                exit$1 = 2;
              } else if (l[1]) {
                exit$1 = 2;
              } else {
                return /* () */0;
              }
            } else {
              exit$1 = 2;
            }
          } else {
            return /* () */0;
          }
          if (exit$1 === 2) {
            if (List.exists(function (param) {
                    switch (param.tag | 0) {
                      case 8 : 
                          return /* true */1;
                      case 10 : 
                          return param[2] ? /* true */1 : /* false */0;
                      default:
                        return /* false */0;
                    }
                  }, l)) {
              return Curry._3(Format.fprintf(fmt, /* Format */[
                              /* Formatting_gen */Block.__(18, [
                                  /* Open_box */Block.__(1, [/* Format */[
                                        /* String_literal */Block.__(11, [
                                            "<v>",
                                            /* End_of_format */0
                                          ]),
                                        "<v>"
                                      ]]),
                                  /* String */Block.__(2, [
                                      /* No_padding */0,
                                      /* String_literal */Block.__(11, [
                                          ": [",
                                          /* Formatting_lit */Block.__(17, [
                                              /* Break */Block.__(0, [
                                                  "@;<0 2>",
                                                  0,
                                                  2
                                                ]),
                                              /* Formatting_gen */Block.__(18, [
                                                  /* Open_box */Block.__(1, [/* Format */[
                                                        /* String_literal */Block.__(11, [
                                                            "<v>",
                                                            /* End_of_format */0
                                                          ]),
                                                        "<v>"
                                                      ]]),
                                                  /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                          /* Close_box */0,
                                                          /* Formatting_lit */Block.__(17, [
                                                              /* Break */Block.__(0, [
                                                                  "@,",
                                                                  0,
                                                                  0
                                                                ]),
                                                              /* Char_literal */Block.__(12, [
                                                                  /* "]" */93,
                                                                  /* Formatting_lit */Block.__(17, [
                                                                      /* Close_box */0,
                                                                      /* End_of_format */0
                                                                    ])
                                                                ])
                                                            ])
                                                        ])])
                                                ])
                                            ])
                                        ])
                                    ])
                                ]),
                              "@[<v>%s: [@;<0 2>@[<v>%a@]@,]@]"
                            ]), i, format_values, l);
            } else {
              return Curry._3(Format.fprintf(fmt, /* Format */[
                              /* Formatting_gen */Block.__(18, [
                                  /* Open_box */Block.__(1, [/* Format */[
                                        /* String_literal */Block.__(11, [
                                            "<hv>",
                                            /* End_of_format */0
                                          ]),
                                        "<hv>"
                                      ]]),
                                  /* String */Block.__(2, [
                                      /* No_padding */0,
                                      /* String_literal */Block.__(11, [
                                          ": [",
                                          /* Formatting_lit */Block.__(17, [
                                              /* Break */Block.__(0, [
                                                  "@;<0 2>",
                                                  0,
                                                  2
                                                ]),
                                              /* Formatting_gen */Block.__(18, [
                                                  /* Open_box */Block.__(1, [/* Format */[
                                                        /* String_literal */Block.__(11, [
                                                            "<hv>",
                                                            /* End_of_format */0
                                                          ]),
                                                        "<hv>"
                                                      ]]),
                                                  /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                          /* Close_box */0,
                                                          /* Formatting_lit */Block.__(17, [
                                                              /* Break */Block.__(0, [
                                                                  "@,",
                                                                  0,
                                                                  0
                                                                ]),
                                                              /* Char_literal */Block.__(12, [
                                                                  /* "]" */93,
                                                                  /* Formatting_lit */Block.__(17, [
                                                                      /* Close_box */0,
                                                                      /* End_of_format */0
                                                                    ])
                                                                ])
                                                            ])
                                                        ])])
                                                ])
                                            ])
                                        ])
                                    ])
                                ]),
                              "@[<hv>%s: [@;<0 2>@[<hv>%a@]@,]@]"
                            ]), i, format_values, l);
            }
          }
          break;
      default:
        exit = 1;
    }
    if (exit === 1) {
      return Curry._3(Format.fprintf(fmt, /* Format */[
                      /* Formatting_gen */Block.__(18, [
                          /* Open_box */Block.__(1, [/* Format */[
                                /* String_literal */Block.__(11, [
                                    "<hov 2>",
                                    /* End_of_format */0
                                  ]),
                                "<hov 2>"
                              ]]),
                          /* String */Block.__(2, [
                              /* No_padding */0,
                              /* Char_literal */Block.__(12, [
                                  /* ":" */58,
                                  /* Formatting_lit */Block.__(17, [
                                      /* Break */Block.__(0, [
                                          "@ ",
                                          1,
                                          0
                                        ]),
                                      /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                              /* Close_box */0,
                                              /* End_of_format */0
                                            ])])
                                    ])
                                ])
                            ])
                        ]),
                      "@[<hov 2>%s:@ %a@]"
                    ]), i, format_value, v);
    }
    
  } else {
    var s = param[1];
    var match$1 = s[/* section_name */1];
    return Curry._4(Format.fprintf(fmt, /* Format */[
                    /* Formatting_gen */Block.__(18, [
                        /* Open_box */Block.__(1, [/* Format */[
                              /* String_literal */Block.__(11, [
                                  "<v 0>",
                                  /* End_of_format */0
                                ]),
                              "<v 0>"
                            ]]),
                        /* String */Block.__(2, [
                            /* No_padding */0,
                            /* Char_literal */Block.__(12, [
                                /* " " */32,
                                /* String */Block.__(2, [
                                    /* No_padding */0,
                                    /* Char_literal */Block.__(12, [
                                        /* "{" */123,
                                        /* Formatting_lit */Block.__(17, [
                                            /* Break */Block.__(0, [
                                                "@;<0 2>",
                                                0,
                                                2
                                              ]),
                                            /* Formatting_gen */Block.__(18, [
                                                /* Open_box */Block.__(1, [/* Format */[
                                                      /* String_literal */Block.__(11, [
                                                          "<v>",
                                                          /* End_of_format */0
                                                        ]),
                                                      "<v>"
                                                    ]]),
                                                /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                        /* Close_box */0,
                                                        /* Formatting_lit */Block.__(17, [
                                                            /* Break */Block.__(0, [
                                                                "@,",
                                                                0,
                                                                0
                                                              ]),
                                                            /* Char_literal */Block.__(12, [
                                                                /* "}" */125,
                                                                /* Formatting_lit */Block.__(17, [
                                                                    /* Close_box */0,
                                                                    /* End_of_format */0
                                                                  ])
                                                              ])
                                                          ])
                                                      ])])
                                              ])
                                          ])
                                      ])
                                  ])
                              ])
                          ])
                      ]),
                    "@[<v 0>%s %s{@;<0 2>@[<v>%a@]@,}@]"
                  ]), s[/* section_kind */0], match$1 ? Curry._1(Printf.sprintf(/* Format */[
                          /* Char_literal */Block.__(12, [
                              /* "\"" */34,
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* String_literal */Block.__(11, [
                                      "\" ",
                                      /* End_of_format */0
                                    ])
                                ])
                            ]),
                          "\"%s\" "
                        ]), escape_string(/* None */0, match$1[0])) : "", format_items, s[/* section_items */2]);
  }
}

function format_items(fmt, is) {
  Format.pp_open_vbox(fmt, 0);
  if (is) {
    format_item(fmt, is[0]);
    List.iter(function (i) {
          Format.pp_print_cut(fmt, /* () */0);
          return format_item(fmt, i);
        }, is[1]);
  }
  return Format.pp_close_box(fmt, /* () */0);
}

function format_opamfile(fmt, f) {
  format_items(fmt, f[/* file_contents */0]);
  return Format.pp_print_newline(fmt, /* () */0);
}

function items(l) {
  format_items(Format.str_formatter, l);
  return Format.flush_str_formatter(/* () */0);
}

function opamfile(f) {
  return items(f[/* file_contents */0]);
}

function value_equals(_v1, _v2) {
  while(true) {
    var v2 = _v2;
    var v1 = _v1;
    switch (v1.tag | 0) {
      case 0 : 
          if (v2.tag) {
            return /* false */0;
          } else {
            return Caml_obj.caml_equal(v1[1], v2[1]);
          }
          break;
      case 1 : 
          if (v2.tag === 1) {
            return +(v1[1] === v2[1]);
          } else {
            return /* false */0;
          }
          break;
      case 2 : 
          if (v2.tag === 2) {
            return +(v1[1] === v2[1]);
          } else {
            return /* false */0;
          }
          break;
      case 3 : 
          if (v2.tag === 3) {
            if (Caml_obj.caml_equal(v1[1], v2[1])) {
              if (value_equals(v1[2], v2[2])) {
                _v2 = v2[3];
                _v1 = v1[3];
                continue ;
                
              } else {
                return /* false */0;
              }
            } else {
              return /* false */0;
            }
          } else {
            return /* false */0;
          }
          break;
      case 4 : 
          if (v2.tag === 4) {
            if (Caml_obj.caml_equal(v1[1], v2[1])) {
              _v2 = v2[2];
              _v1 = v1[2];
              continue ;
              
            } else {
              return /* false */0;
            }
          } else {
            return /* false */0;
          }
          break;
      case 5 : 
          if (v2.tag === 5) {
            if (Caml_obj.caml_equal(v1[1], v2[1])) {
              if (value_equals(v1[2], v2[2])) {
                _v2 = v2[3];
                _v1 = v1[3];
                continue ;
                
              } else {
                return /* false */0;
              }
            } else {
              return /* false */0;
            }
          } else {
            return /* false */0;
          }
          break;
      case 6 : 
          if (v2.tag === 6) {
            if (Caml_obj.caml_equal(v1[1], v2[1])) {
              _v2 = v2[2];
              _v1 = v1[2];
              continue ;
              
            } else {
              return /* false */0;
            }
          } else {
            return /* false */0;
          }
          break;
      case 7 : 
          if (v2.tag === 7) {
            return +(v1[1] === v2[1]);
          } else {
            return /* false */0;
          }
          break;
      case 8 : 
          if (v2.tag === 8) {
            try {
              return List.for_all2(value_equals, v1[1], v2[1]);
            }
            catch (raw_exn){
              var exn = Js_exn.internalToOCamlException(raw_exn);
              if (exn[0] === Caml_builtin_exceptions.invalid_argument) {
                return /* false */0;
              } else {
                throw exn;
              }
            }
          } else {
            return /* false */0;
          }
          break;
      case 9 : 
          if (v2.tag === 9) {
            try {
              return List.for_all2(value_equals, v1[1], v2[1]);
            }
            catch (raw_exn$1){
              var exn$1 = Js_exn.internalToOCamlException(raw_exn$1);
              if (exn$1[0] === Caml_builtin_exceptions.invalid_argument) {
                return /* false */0;
              } else {
                throw exn$1;
              }
            }
          } else {
            return /* false */0;
          }
          break;
      case 10 : 
          if (v2.tag === 10) {
            if (value_equals(v1[1], v2[1])) {
              try {
                return List.for_all2(value_equals, v1[2], v2[2]);
              }
              catch (raw_exn$2){
                var exn$2 = Js_exn.internalToOCamlException(raw_exn$2);
                if (exn$2[0] === Caml_builtin_exceptions.invalid_argument) {
                  return /* false */0;
                } else {
                  throw exn$2;
                }
              }
            } else {
              return /* false */0;
            }
          } else {
            return /* false */0;
          }
          break;
      case 11 : 
          if (v2.tag === 11) {
            if (Caml_obj.caml_equal(v1[2], v2[2])) {
              if (value_equals(v1[1], v2[1])) {
                _v2 = v2[3];
                _v1 = v1[3];
                continue ;
                
              } else {
                return /* false */0;
              }
            } else {
              return /* false */0;
            }
          } else {
            return /* false */0;
          }
          break;
      
    }
  };
}

function opamfile_item_equals(i1, i2) {
  if (i1.tag) {
    if (!i2.tag || i1[1] !== i2[1]) {
      return /* false */0;
    } else {
      return value_equals(i1[2], i2[2]);
    }
  } else {
    var s1 = i1[1];
    if (i2.tag) {
      return /* false */0;
    } else {
      var s2 = i2[1];
      if (s1[/* section_kind */0] === s2[/* section_kind */0]) {
        if (Caml_obj.caml_equal(s1[/* section_name */1], s2[/* section_name */1])) {
          try {
            return List.for_all2(opamfile_item_equals, s1[/* section_items */2], s2[/* section_items */2]);
          }
          catch (raw_exn){
            var exn = Js_exn.internalToOCamlException(raw_exn);
            if (exn[0] === Caml_builtin_exceptions.invalid_argument) {
              return /* false */0;
            } else {
              throw exn;
            }
          }
        } else {
          return /* false */0;
        }
      } else {
        return /* false */0;
      }
    }
  }
}

function escape_string$1(s) {
  var len = s.length;
  var buf = Buffer.create((len << 1));
  Buffer.add_char(buf, /* "\"" */34);
  for(var i = 0 ,i_finish = len - 1 | 0; i <= i_finish; ++i){
    var c = Caml_string.get(s, i);
    var switcher = c - 34 | 0;
    if (switcher > 58 || switcher < 0) {
      if (switcher !== -24) {
        Buffer.add_char(buf, c);
      } else {
        Buffer.add_string(buf, "\\n");
      }
    } else if (switcher > 57 || switcher < 1) {
      Buffer.add_char(buf, /* "\\" */92);
      Buffer.add_char(buf, c);
    } else {
      Buffer.add_char(buf, c);
    }
  }
  Buffer.add_char(buf, /* "\"" */34);
  return Buffer.contents(buf);
}

function value$1(param) {
  switch (param.tag | 0) {
    case 0 : 
        return Pervasives.string_of_bool(param[1]);
    case 1 : 
        return Pervasives.string_of_int(param[1]);
    case 2 : 
        return escape_string$1(param[1]);
    case 3 : 
        return $$String.concat(" ", /* :: */[
                    value$1(param[2]),
                    /* :: */[
                      relop(param[1]),
                      /* :: */[
                        value$1(param[3]),
                        /* [] */0
                      ]
                    ]
                  ]);
    case 4 : 
        return $$String.concat(" ", /* :: */[
                    relop(param[1]),
                    /* :: */[
                      value$1(param[2]),
                      /* [] */0
                    ]
                  ]);
    case 5 : 
        return $$String.concat(" ", /* :: */[
                    value$1(param[2]),
                    /* :: */[
                      logop(param[1]),
                      /* :: */[
                        value$1(param[3]),
                        /* [] */0
                      ]
                    ]
                  ]);
    case 6 : 
        return $$String.concat(" ", /* :: */[
                    pfxop(param[1]),
                    /* :: */[
                      value$1(param[2]),
                      /* [] */0
                    ]
                  ]);
    case 7 : 
        return param[1];
    case 8 : 
        return Curry._1(Printf.sprintf(/* Format */[
                        /* Char_literal */Block.__(12, [
                            /* "[" */91,
                            /* String */Block.__(2, [
                                /* No_padding */0,
                                /* Char_literal */Block.__(12, [
                                    /* "]" */93,
                                    /* End_of_format */0
                                  ])
                              ])
                          ]),
                        "[%s]"
                      ]), $$String.concat(" ", List.map(value$1, param[1])));
    case 9 : 
        return Curry._1(Printf.sprintf(/* Format */[
                        /* Char_literal */Block.__(12, [
                            /* "(" */40,
                            /* String */Block.__(2, [
                                /* No_padding */0,
                                /* Char_literal */Block.__(12, [
                                    /* ")" */41,
                                    /* End_of_format */0
                                  ])
                              ])
                          ]),
                        "(%s)"
                      ]), $$String.concat(" ", List.map(value$1, param[1])));
    case 10 : 
        return Curry._2(Printf.sprintf(/* Format */[
                        /* String */Block.__(2, [
                            /* No_padding */0,
                            /* String_literal */Block.__(11, [
                                " {",
                                /* String */Block.__(2, [
                                    /* No_padding */0,
                                    /* Char_literal */Block.__(12, [
                                        /* "}" */125,
                                        /* End_of_format */0
                                      ])
                                  ])
                              ])
                          ]),
                        "%s {%s}"
                      ]), value$1(param[1]), $$String.concat(" ", List.map(value$1, param[2])));
    case 11 : 
        return $$String.concat(" ", /* :: */[
                    value$1(param[1]),
                    /* :: */[
                      env_update_op(param[2]),
                      /* :: */[
                        value$1(param[3]),
                        /* [] */0
                      ]
                    ]
                  ]);
    
  }
}

function item(param) {
  if (param.tag) {
    var v = param[2];
    var i = param[1];
    if (v.tag === 8) {
      var l = v[1];
      var exit = 0;
      if (l) {
        var match = l[0];
        if (match.tag === 8) {
          if (match[1]) {
            exit = 1;
          } else if (l[1]) {
            exit = 1;
          } else {
            return "";
          }
        } else {
          exit = 1;
        }
      } else {
        return "";
      }
      if (exit === 1) {
        return Curry._2(Printf.sprintf(/* Format */[
                        /* String */Block.__(2, [
                            /* No_padding */0,
                            /* String_literal */Block.__(11, [
                                ": [",
                                /* String */Block.__(2, [
                                    /* No_padding */0,
                                    /* Char_literal */Block.__(12, [
                                        /* "]" */93,
                                        /* End_of_format */0
                                      ])
                                  ])
                              ])
                          ]),
                        "%s: [%s]"
                      ]), i, $$String.concat(" ", List.map(value$1, l)));
      }
      
    } else {
      return $$String.concat(": ", /* :: */[
                  i,
                  /* :: */[
                    value$1(v),
                    /* [] */0
                  ]
                ]);
    }
  } else {
    var s = param[1];
    var match$1 = s[/* section_name */1];
    return Curry._3(Printf.sprintf(/* Format */[
                    /* String */Block.__(2, [
                        /* No_padding */0,
                        /* Char_literal */Block.__(12, [
                            /* " " */32,
                            /* String */Block.__(2, [
                                /* No_padding */0,
                                /* String_literal */Block.__(11, [
                                    "{\n",
                                    /* String */Block.__(2, [
                                        /* No_padding */0,
                                        /* String_literal */Block.__(11, [
                                            "\n}",
                                            /* End_of_format */0
                                          ])
                                      ])
                                  ])
                              ])
                          ])
                      ]),
                    "%s %s{\n%s\n}"
                  ]), s[/* section_kind */0], match$1 ? escape_string$1(match$1[0]) + " " : "", $$String.concat("\n", List.map(item, s[/* section_items */2])));
  }
}

function item_order(a, b) {
  if (a.tag) {
    if (b.tag) {
      return $$String.compare(a[1], b[1]);
    } else {
      return -1;
    }
  } else {
    var s = a[1];
    if (b.tag) {
      return 1;
    } else {
      var t = b[1];
      var r = $$String.compare(s[/* section_kind */0], t[/* section_kind */0]);
      if (r !== 0) {
        return r;
      } else {
        return Caml_obj.caml_compare(s[/* section_name */1], t[/* section_name */1]);
      }
    }
  }
}

function items$1(its) {
  var its$1 = List.sort(item_order, its);
  return $$String.concat("\n", List.map(item, its$1)) + "\n";
}

function opamfile$1(f) {
  return items$1(f[/* file_contents */0]);
}

var Normalise = /* module */[
  /* escape_string */escape_string$1,
  /* value */value$1,
  /* item */item,
  /* item_order */item_order,
  /* items */items$1,
  /* opamfile */opamfile$1
];

function items$2(txt, orig, f) {
  var aux = function (_acc, s) {
    while(true) {
      var acc = _acc;
      var until;
      try {
        until = /* Some */[$$String.index_from(s, List.hd(acc), /* "\n" */10)];
      }
      catch (exn){
        if (exn === Caml_builtin_exceptions.not_found) {
          until = /* None */0;
        } else {
          throw exn;
        }
      }
      if (until) {
        _acc = /* :: */[
          until[0] + 1 | 0,
          acc
        ];
        continue ;
        
      } else {
        return $$Array.of_list(List.rev(acc));
      }
    };
  };
  var lines_index = aux(/* :: */[
        0,
        /* [] */0
      ], txt);
  var pos_index = function (param) {
    return Caml_array.caml_array_get(lines_index, param[1] - 1 | 0) + param[2] | 0;
  };
  var get_substring = function (start_pos, rest) {
    var start = pos_index(start_pos);
    var stop = rest ? pos_index(rest[0][0]) : txt.length;
    if (stop < start) {
      throw Pervasives.Exit;
    } else {
      return $$String.sub(txt, start, stop - start | 0);
    }
  };
  var list_take = function (f, l) {
    var _acc = /* [] */0;
    var _param = l;
    while(true) {
      var param = _param;
      var acc = _acc;
      if (param) {
        var r = param[1];
        var x = param[0];
        if (Curry._1(f, x)) {
          return /* tuple */[
                  /* Some */[x],
                  List.rev_append(acc, r)
                ];
        } else {
          _param = r;
          _acc = /* :: */[
            x,
            acc
          ];
          continue ;
          
        }
      } else {
        return /* tuple */[
                /* None */0,
                List.rev(acc)
              ];
      }
    };
  };
  var aux$1 = function (_acc, _f, _param) {
    while(true) {
      var param = _param;
      var f = _f;
      var acc = _acc;
      if (param) {
        var sec = param[0];
        if (sec.tag) {
          var r = param[1];
          var name = sec[1];
          var match = list_take((function(name){
              return function (param) {
                var name$1 = name;
                var param$1 = param;
                if (param$1.tag) {
                  return +(name$1 === param$1[1]);
                } else {
                  return /* false */0;
                }
              }
              }(name)), f);
          var match$1 = match[0];
          if (match$1) {
            var item = match$1[0];
            var exit = 0;
            if (item.tag) {
              if (value_equals(sec[2], item[2])) {
                _param = r;
                _f = match[1];
                _acc = /* :: */[
                  get_substring(sec[0], r),
                  acc
                ];
                continue ;
                
              } else {
                exit = 1;
              }
            } else {
              exit = 1;
            }
            if (exit === 1) {
              _param = r;
              _f = match[1];
              _acc = /* :: */[
                items(/* :: */[
                      item,
                      /* [] */0
                    ]) + "\n",
                acc
              ];
              continue ;
              
            }
            
          } else {
            _param = r;
            _f = match[1];
            continue ;
            
          }
        } else {
          var r$1 = param[1];
          var match$2 = sec[1];
          var section_name = match$2[/* section_name */1];
          var section_kind = match$2[/* section_kind */0];
          var match$3 = list_take((function(section_kind,section_name){
              return function (param) {
                var kind = section_kind;
                var name = section_name;
                var param$1 = param;
                if (param$1.tag) {
                  return /* false */0;
                } else {
                  var match = param$1[1];
                  if (kind === match[/* section_kind */0]) {
                    return Caml_obj.caml_equal(name, match[/* section_name */1]);
                  } else {
                    return /* false */0;
                  }
                }
              }
              }(section_kind,section_name)), f);
          var match$4 = match$3[0];
          if (match$4) {
            var f$1 = match$3[1];
            var s = match$4[0];
            if (opamfile_item_equals(sec, s)) {
              _param = r$1;
              _f = f$1;
              _acc = /* :: */[
                get_substring(sec[0], r$1),
                acc
              ];
              continue ;
              
            } else {
              _param = r$1;
              _f = f$1;
              _acc = /* :: */[
                items(/* :: */[
                      s,
                      /* [] */0
                    ]) + "\n",
                acc
              ];
              continue ;
              
            }
          } else {
            _param = r$1;
            _f = match$3[1];
            continue ;
            
          }
        }
      } else {
        var remaining = f ? /* :: */[
            items(f) + "\n",
            /* [] */0
          ] : /* [] */0;
        return List.rev_append(acc, remaining);
      }
    };
  };
  var header_000 = get_substring(/* tuple */[
        "",
        1,
        0
      ], orig);
  var header = /* :: */[
    header_000,
    /* [] */0
  ];
  return $$String.concat("", aux$1(header, f, orig));
}

function opamfile$2(format_from, f) {
  var orig_file = format_from ? format_from[0] : f[/* file_name */1];
  var b = Buffer.create(4096);
  var ic = Pervasives.open_in(orig_file);
  var txt;
  try {
    while(true) {
      Buffer.add_channel(b, ic, 4096);
    };
    throw [
          Caml_builtin_exceptions.assert_failure,
          [
            "opamPrinter.ml",
            330,
            59
          ]
        ];
  }
  catch (e){
    if (e === Caml_builtin_exceptions.end_of_file) {
      Curry._1(Pervasives.close_in, ic);
      txt = Buffer.contents(b);
    } else {
      Curry._1(Pervasives.close_in, ic);
      throw e;
    }
  }
  var orig = OpamParser.string(txt, orig_file);
  return items$2(txt, orig[/* file_contents */0], f[/* file_contents */0]);
}

var Preserved = /* module */[
  /* items */items$2,
  /* opamfile */opamfile$2
];

exports.relop                = relop;
exports.logop                = logop;
exports.pfxop                = pfxop;
exports.env_update_op        = env_update_op;
exports.value                = value;
exports.value_list           = value_list;
exports.items                = items;
exports.opamfile             = opamfile;
exports.format_opamfile      = format_opamfile;
exports.Normalise            = Normalise;
exports.Preserved            = Preserved;
exports.value_equals         = value_equals;
exports.opamfile_item_equals = opamfile_item_equals;
/* Format Not a pure module */
