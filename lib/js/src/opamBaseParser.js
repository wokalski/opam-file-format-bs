// Generated by BUCKLESCRIPT VERSION 1.7.3, PLEASE EDIT WITH CARE
'use strict';

var Block      = require("bs-platform/lib/js/block.js");
var Curry      = require("bs-platform/lib/js/curry.js");
var Parsing    = require("bs-platform/lib/js/parsing.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");

function get_pos(n) {
  var pos = Parsing.rhs_start_pos(n);
  return /* tuple */[
          pos[/* pos_fname */0],
          pos[/* pos_lnum */1],
          pos[/* pos_cnum */3] - pos[/* pos_bol */2] | 0
        ];
}

var yytransl_const = /* array */[
  0,
  260,
  261,
  262,
  263,
  264,
  265,
  266,
  269,
  270,
  0
];

var yytransl_block = /* array */[
  257,
  258,
  259,
  267,
  268,
  271,
  272,
  0
];

var yyact = /* array */[
  function () {
    return Pervasives.failwith("parser");
  },
  function (__caml_parser_env) {
    var _1 = Parsing.peek_val(__caml_parser_env, 1);
    return function (file_name) {
      return /* record */[
              /* file_contents */_1,
              /* file_name */file_name
            ];
    };
  },
  function (__caml_parser_env) {
    var _1 = Parsing.peek_val(__caml_parser_env, 1);
    var _2 = Parsing.peek_val(__caml_parser_env, 0);
    return /* :: */[
            _1,
            _2
          ];
  },
  function () {
    return /* [] */0;
  },
  function (__caml_parser_env) {
    var _1 = Parsing.peek_val(__caml_parser_env, 2);
    var _3 = Parsing.peek_val(__caml_parser_env, 0);
    return /* Variable */Block.__(1, [
              get_pos(1),
              _1,
              _3
            ]);
  },
  function (__caml_parser_env) {
    var _1 = Parsing.peek_val(__caml_parser_env, 3);
    var _3 = Parsing.peek_val(__caml_parser_env, 1);
    return /* Section */Block.__(0, [
              get_pos(1),
              /* record */[
                /* section_kind */_1,
                /* section_name : None */0,
                /* section_items */_3
              ]
            ]);
  },
  function (__caml_parser_env) {
    var _1 = Parsing.peek_val(__caml_parser_env, 4);
    var _2 = Parsing.peek_val(__caml_parser_env, 3);
    var _4 = Parsing.peek_val(__caml_parser_env, 1);
    return /* Section */Block.__(0, [
              get_pos(1),
              /* record */[
                /* section_kind */_1,
                /* section_name : Some */[_2],
                /* section_items */_4
              ]
            ]);
  },
  function (__caml_parser_env) {
    return Parsing.peek_val(__caml_parser_env, 0);
  },
  function (__caml_parser_env) {
    var _2 = Parsing.peek_val(__caml_parser_env, 1);
    return /* Group */Block.__(9, [
              get_pos(1),
              _2
            ]);
  },
  function (__caml_parser_env) {
    var _2 = Parsing.peek_val(__caml_parser_env, 1);
    return /* List */Block.__(8, [
              get_pos(1),
              _2
            ]);
  },
  function (__caml_parser_env) {
    var _1 = Parsing.peek_val(__caml_parser_env, 3);
    var _3 = Parsing.peek_val(__caml_parser_env, 1);
    return /* Option */Block.__(10, [
              get_pos(2),
              _1,
              _3
            ]);
  },
  function (__caml_parser_env) {
    var _1 = Parsing.peek_val(__caml_parser_env, 2);
    var _3 = Parsing.peek_val(__caml_parser_env, 0);
    return /* Logop */Block.__(5, [
              get_pos(2),
              /* And */3257015,
              _1,
              _3
            ]);
  },
  function (__caml_parser_env) {
    var _1 = Parsing.peek_val(__caml_parser_env, 2);
    var _3 = Parsing.peek_val(__caml_parser_env, 0);
    return /* Logop */Block.__(5, [
              get_pos(2),
              /* Or */17731,
              _1,
              _3
            ]);
  },
  function (__caml_parser_env) {
    var _1 = Parsing.peek_val(__caml_parser_env, 2);
    var _2 = Parsing.peek_val(__caml_parser_env, 1);
    var _3 = Parsing.peek_val(__caml_parser_env, 0);
    return /* Relop */Block.__(3, [
              get_pos(2),
              _2,
              _1,
              _3
            ]);
  },
  function (__caml_parser_env) {
    var _1 = Parsing.peek_val(__caml_parser_env, 2);
    var _2 = Parsing.peek_val(__caml_parser_env, 1);
    var _3 = Parsing.peek_val(__caml_parser_env, 0);
    return /* Env_binding */Block.__(11, [
              get_pos(1),
              _1,
              _2,
              _3
            ]);
  },
  function (__caml_parser_env) {
    var _1 = Parsing.peek_val(__caml_parser_env, 1);
    var _2 = Parsing.peek_val(__caml_parser_env, 0);
    return /* Pfxop */Block.__(6, [
              get_pos(1),
              _1,
              _2
            ]);
  },
  function (__caml_parser_env) {
    var _1 = Parsing.peek_val(__caml_parser_env, 1);
    var _2 = Parsing.peek_val(__caml_parser_env, 0);
    return /* Prefix_relop */Block.__(4, [
              get_pos(1),
              _1,
              _2
            ]);
  },
  function () {
    return /* [] */0;
  },
  function (__caml_parser_env) {
    var _1 = Parsing.peek_val(__caml_parser_env, 1);
    var _2 = Parsing.peek_val(__caml_parser_env, 0);
    return /* :: */[
            _1,
            _2
          ];
  },
  function (__caml_parser_env) {
    var _1 = Parsing.peek_val(__caml_parser_env, 0);
    return /* Ident */Block.__(7, [
              get_pos(1),
              _1
            ]);
  },
  function (__caml_parser_env) {
    var _1 = Parsing.peek_val(__caml_parser_env, 0);
    return /* Bool */Block.__(0, [
              get_pos(1),
              _1
            ]);
  },
  function (__caml_parser_env) {
    var _1 = Parsing.peek_val(__caml_parser_env, 0);
    return /* Int */Block.__(1, [
              get_pos(1),
              _1
            ]);
  },
  function (__caml_parser_env) {
    var _1 = Parsing.peek_val(__caml_parser_env, 0);
    return /* String */Block.__(2, [
              get_pos(1),
              _1
            ]);
  },
  function (__caml_parser_env) {
    throw [
          Parsing.YYexit,
          Parsing.peek_val(__caml_parser_env, 0)
        ];
  },
  function (__caml_parser_env) {
    throw [
          Parsing.YYexit,
          Parsing.peek_val(__caml_parser_env, 0)
        ];
  }
];

var yytables = /* record */[
  /* actions */yyact,
  /* transl_const */yytransl_const,
  /* transl_block */yytransl_block,
  /* lhs */"\xff\xff\x01\0\x03\0\x03\0\x04\0\x04\0\x04\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x06\0\x06\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0",
  /* len */"\x02\0\x02\0\x02\0\0\0\x03\0\x04\0\x05\0\x01\0\x03\0\x03\0\x04\0\x03\0\x03\0\x03\0\x03\0\x02\0\x02\0\0\0\x02\0\x01\0\x01\0\x01\0\x01\0\x02\0\x02\0",
  /* defred */"\0\0\0\0\0\0\0\0\0\0\x17\0\0\0\0\0\x16\0\x13\0\x14\0\0\0\0\0\x15\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\x02\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x12\0\t\0\b\0\0\0\0\0\0\0\r\0\x0e\0\0\0\x05\0\n\0\x06\0",
  /* dgoto */"\x03\0\x05\0\x17\0\x06\0\x07\0\x11\0\x18\0",
  /* sindex */"3\0\x05\xff6\xff\0\0\x04\xff\0\0\x18\0\x05\xff\0\0\0\0\0\x006\xff6\xff\0\0 \xff6\xff;\xff\x07\xff\x12\xff\x05\xff6\xff\0\0\0\0$\xff\x19\xff\x1d\xff\0\0\x18\xff6\xff6\xff6\xff \xff \xff\x05\xff2\xff;\xff\0\0\0\0\0\x004\xff\x03\xff\x18\xff\0\0\0\x005\xff\0\0\0\0\0\0",
  /* rindex */"\0\0)\0\0\0\0\0\0\0\0\0\0\0\x02\0\0\0\0\0\0\0(\xff8\xff\0\0\0\0\0\0@\0\x01\0\0\0=\xff\0\0\0\0\0\0\x01\xff\0\0\0\0\0\0\x10\0>\xff\0\0\0\0\0\0\0\0=\xff\0\x006\0\0\0\0\0\0\0\0\0.\0\x1f\0\0\0\0\0\0\0\0\0\0\0\0\0",
  /* gindex */"\0\0\0\0\xfe\xff\xfc\xff\0\0\xf6\xff\xfd\xff",
  /* tablesize */319,
  /* table */"\x10\0\x07\0\x03\0\x16\0\x1a\0\x12\0\x11\0\x04\0\x11\0\x19\0\x11\0\x1c\0\x13\0\x1b\0\x14\0\"\0\x0f\0\x1e\0#\0\x1f\0$\0*\0+\0 \0\x15\0'\0!\0(\0)\0,\0%\0\f\0\x1c\0\b\0\t\0\n\0&\0\b\0\t\0\n\0\x0b\0\x03\0\f\0\r\0\x1c\0\x11\0\x0b\0\r\0\x0e\0\x1d\0\x1e\0\x0f\0\x01\0\x02\0\x04\0\b\0\t\0\n\0\x0b\0-\0\f\0.\0/\0\x11\0\x18\0\r\0\x0e\0\x1c\0\0\0\x0f\0\x03\0\x11\0\x1d\0\x1e\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x03\0\x07\0\0\0\x07\0\x07\0\x07\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\0\0\x0f\0\0\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\0\0\f\0\0\0\f\0\f\0\f\0\f\0\f\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\0\0\x0b\0\x04\0\x0b\0\x0b\0\x0b\0\0\0\x0b\0\0\0\x04\0",
  /* check */"\x02\0\0\0\0\0\x07\0\x0e\0\x01\x01\x05\x01\x02\x01\x07\x01\f\0\t\x01\b\x01\b\x01\x0f\0\n\x01\x13\0\0\0\x0e\x01\x14\0\f\x01\x17\0\x1f\0 \0\x10\x01\0\0\x1c\0\b\x01\x1d\0\x1e\0!\0\x05\x01\0\0\b\x01\x01\x01\x02\x01\x03\x01\x07\x01\x01\x01\x02\x01\x03\x01\x04\x01\0\0\x06\x01\x0b\x01\b\x01\x05\x01\0\0\x0b\x01\f\x01\r\x01\x0e\x01\x0f\x01\x01\0\x02\0\0\0\x01\x01\x02\x01\x03\x01\x04\x01\t\x01\x06\x01\t\x01\t\x01\x07\x01\0\0\x0b\x01\f\x01\b\x01\xff\xff\x0f\x01\t\x01\t\x01\r\x01\x0e\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\x01\x02\x01\x03\x01\x04\x01\x05\x01\x06\x01\x07\x01\b\x01\t\x01\t\x01\x0b\x01\xff\xff\r\x01\x0e\x01\x0f\x01\x01\x01\x02\x01\x03\x01\x04\x01\x05\x01\x06\x01\x07\x01\xff\xff\t\x01\xff\xff\x0b\x01\f\x01\r\x01\x0e\x01\x0f\x01\x01\x01\x02\x01\x03\x01\x04\x01\x05\x01\x06\x01\x07\x01\xff\xff\t\x01\xff\xff\x0b\x01\f\x01\r\x01\x0e\x01\x0f\x01\x01\x01\x02\x01\x03\x01\x04\x01\x05\x01\x06\x01\x07\x01\xff\xff\t\x01\x02\x01\x0b\x01\f\x01\r\x01\xff\xff\x0f\x01\xff\xff\t\x01",
  /* error_function */Parsing.parse_error,
  /* names_const */"EOF\0LBRACKET\0RBRACKET\0LPAR\0RPAR\0LBRACE\0RBRACE\0COLON\0AND\0OR\0",
  /* names_block */"STRING\0IDENT\0BOOL\0INT\0RELOP\0PFXOP\0ENVOP\0"
];

function main(lexfun, lexbuf) {
  return Parsing.yyparse(yytables, 1, lexfun, lexbuf);
}

function value(lexfun, lexbuf) {
  return Parsing.yyparse(yytables, 2, lexfun, lexbuf);
}

function main$1(t, l, f) {
  try {
    var r = Curry._1(main(t, l), f);
    Parsing.clear_parser(/* () */0);
    return r;
  }
  catch (e){
    Parsing.clear_parser(/* () */0);
    throw e;
  }
}

exports.main  = main$1;
exports.value = value;
/* No side effect */
